{
  "name": "Wild Shape",
  "permission": {
    "default": 0
  },
  "type": "script",
  "flags": {},
  "scope": "global",
  "command": "// Author: @Adam\r\n\r\n// SETUP NEEDED: for each transformation option you want, please enter it as below\r\n// you also need to set imageFolder to the location of where you store your tokens.\r\n// token art is selected by name & as a png, so for example the image for Bat is located at 'worlds/golarion/tokens/Bestiary/Bat.png'\r\n\r\n// support for elemental body is not complete yet - only air elemental is hardcoded\r\n\r\nconst imageFolder = \"worlds/golarion/tokens/Bestiary\";\r\n\r\nconst transformationOptions = {\r\n  Bat: {\r\n    size: \"diminutive\",\r\n    spellSource: \"beast shape\",\r\n  },\r\n  \"Giant Squid\": {\r\n    size: \"huge\",\r\n    spellSource: \"beast shape\",\r\n  },\r\n  Tendriculos: {\r\n    size: \"huge\",\r\n    spellSource: \"plant shape\",\r\n  },\r\n  \"Air Elemental\": {\r\n    size: \"huge\",\r\n    spellSource: \"elemental body\",\r\n  },\r\n};\r\n\r\nconst sizes = [\"diminutive\", \"tiny\", \"small\", \"medium\", \"large\", \"huge\", \"gargantuan\", \"colossal\"];\r\n\r\nconst sizeTranslation = {\r\n  fine: \"fine\",\r\n  diminutive: \"dim\",\r\n  tiny: \"tiny\",\r\n  small: \"sm\",\r\n  medium: \"med\",\r\n  large: \"lg\",\r\n  huge: \"huge\",\r\n  gargantuan: \"grg\",\r\n  colossal: \"col\",\r\n};\r\n\r\nconst createSizeObject = ({ w, h, scale }) => {\r\n  return {\r\n    width: w,\r\n    height: h,\r\n    scale,\r\n  };\r\n};\r\n\r\nconst mediumOrBigger = (size) => {\r\n  return sizes.indexOf(size) >= sizes.indexOf(\"medium\");\r\n};\r\n\r\nconst createAbilityChange = (formula, subTarget) => {\r\n  formula = \"\" + formula;\r\n  return {\r\n    formula,\r\n    priority: 1,\r\n    target: \"ability\",\r\n    subTarget,\r\n    modifier: \"size\",\r\n  };\r\n};\r\n\r\nconst createNACChange = (formula) => {\r\n  formula = \"\" + formula;\r\n  return {\r\n    formula,\r\n    priority: 1,\r\n    target: \"ac\",\r\n    subTarget: \"nac\",\r\n    modifier: \"size\",\r\n  };\r\n};\r\n\r\nconst createSpeedChange = (formula, subTarget) => {\r\n  formula = \"\" + formula;\r\n  return {\r\n    formula,\r\n    priority: 1,\r\n    target: \"speed\",\r\n    subTarget,\r\n    modifier: \"size\",\r\n  };\r\n};\r\n\r\nconst createBuffChanges = (name) => {\r\n  const creature = transformationOptions[name];\r\n  const bulking = mediumOrBigger(creature.size);\r\n  let buffLevel = null;\r\n\r\n  const changes = [];\r\n\r\n  if (bulking) {\r\n    buffLevel = sizes.indexOf(creature.size) - sizes.indexOf(\"medium\") + 1;\r\n  } else {\r\n    buffLevel = sizes.indexOf(\"medium\") - sizes.indexOf(creature.size);\r\n  }\r\n\r\n  switch (creature.spellSource.toLowerCase()) {\r\n    case \"beast shape\": {\r\n      const mainBonus = buffLevel * 2;\r\n      const nacBonus = buffLevel * 2;\r\n      const penalty = buffLevel > 1 ? -(buffLevel * 2 - 2) : 0;\r\n      const mainBonusAbility = bulking ? \"str\" : \"dex\";\r\n      const penaltyAbility = bulking ? \"dex\" : \"str\";\r\n\r\n      changes.push(createAbilityChange(mainBonus, mainBonusAbility));\r\n      changes.push(createAbilityChange(penalty, penaltyAbility));\r\n      changes.push(createNACChange(nacBonus));\r\n      break;\r\n    }\r\n    case \"plant shape\": {\r\n      const nacBonus = buffLevel * 2;\r\n      if (bulking) {\r\n        const strBonus = Math.pow(2, buffLevel);\r\n        const conBonus = Math.max(2, buffLevel / 2);\r\n        const penalty = -(buffLevel > 2 ? 2 : 0);\r\n\r\n        changes.push(createAbilityChange(strBonus, \"str\"));\r\n        changes.push(createAbilityChange(conBonus, \"con\"));\r\n        changes.push(createAbilityChange(penalty, \"dex\"));\r\n      } else {\r\n        const conBonus = buffLevel * 2;\r\n        changes.push(createAbilityChange(conBonus, \"con\"));\r\n      }\r\n      changes.push(createNACChange(nacBonus));\r\n      break;\r\n    }\r\n    case \"elemental body\": {\r\n      if (name === \"Air Elemental\") {\r\n        changes.push(createAbilityChange(4, \"str\"));\r\n        changes.push(createAbilityChange(6, \"dex\"));\r\n        changes.push(createNACChange(4));\r\n        changes.push(createSpeedChange(120, \"flySpeed\"));\r\n      }\r\n      break;\r\n    }\r\n    default: {\r\n      ui.notifications.error(\r\n        `Cannot find spellSource (${creature.spellSource.toLowerCase()}) in programmed list. Ensure there are no typos.`\r\n      );\r\n    }\r\n  }\r\n\r\n  return changes;\r\n};\r\n\r\nconst createWSBuff = async (caster) => {\r\n  const itemData = { type: \"buff\", name: \"Wild Shape (Auto)\", data: { buffType: \"temp\", level: 1 } };\r\n  // Get templates\r\n  await caster.createOwnedItem(itemData);\r\n  return getWSBuff(caster);\r\n};\r\n\r\nconst getWSBuff = (caster) => {\r\n  return caster.items.find(\r\n    (i) =>\r\n    i.type === \"buff\" &&\r\n    i.name === \"Wild Shape (Auto)\"\r\n  );\r\n};\r\n\r\nconst transform = async (caster, token, name) => {\r\n  const creature = transformationOptions[name];\r\n  const changes = createBuffChanges(name);\r\n\r\n  let buff = getWSBuff(caster);\r\n  if (!buff) buff = await createWSBuff(caster);\r\n  buff.update({ \"data.changes\": changes });\r\n  buff.update({ \"data.active\": true });\r\n\r\n  token.update({ img: `${imageFolder}/${name}.png` });\r\n  token.update(\r\n    createSizeObject(CONFIG.PF1.tokenSizes[sizeTranslation[creature.size]])\r\n  );\r\n  caster.data.data.traits.size = sizeTranslation[creature.size];\r\n};\r\n\r\nconst revertForm = (caster, token) => {\r\n  getWSBuff(caster).update({ \"data.active\": false });\r\n  token.update({ img: caster.data.flags.originalData.image });\r\n  caster.data.data.traits.size = caster.data.flags.originalData.size;\r\n  token.update(\r\n    createSizeObject(CONFIG.PF1.tokenSizes[caster.data.flags.originalData.size])\r\n  );\r\n};\r\n\r\nconst tokens = canvas.tokens.controlled;\r\n\r\nif (tokens.length !== 1) {\r\n  ui.notifications.warn(\"Select a token.\");\r\n} else {\r\n  const token = tokens[0];\r\n  const actor = token.actor;\r\n  const caster = actor.data;\r\n\r\n  if (!Object.keys(caster.flags).includes(\"originalData\")) {\r\n    const originalData = {\r\n      image: caster.token.img,\r\n      size: caster.data.traits.size,\r\n    };\r\n    caster.flags.originalData = originalData;\r\n  }\r\n\r\n  const buttons = Object.keys(transformationOptions).map((optionName) => ({\r\n    label: optionName,\r\n    callback: () => transform(actor, token, optionName),\r\n  }));\r\n  buttons[\"Revert\"] = {\r\n    label: \"Revert\",\r\n    icon: '<i class=\"fas fa-user\"></i>',\r\n    callback: () => revertForm(actor, token),\r\n  };\r\n\r\n  new Dialog({\r\n    title: \"Wild Shape\",\r\n    content: \"Choose creature.\",\r\n    buttons: buttons,\r\n  }).render(true);\r\n}",
  "author": "ZuWclcb9BUy2aZSN",
  "img": "systems/pf1/icons/skills/green_27.jpg",
  "actorIds": [],
  "_id": "GyuHEoeLTtLZCvhS"
}